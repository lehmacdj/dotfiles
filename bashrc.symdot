#!/bin/bash
# Your bash configuration

# Environment
## Environment variables tell programs in your shell where stuff is etc.
## Here we set all of the necessary ones for a very basic environment. Often
## programs try to add configuration to your bashrc. When they do they are
## typically just adding stuff that configures your environment. In order to
## keep your bash configuration readable move that stuff to this section of your
## bashrc in order to make sure that you don't end up with a tangled mess of
## autogenerated completion at the bottom of your bashrc

# Check if ~/.dotfiles is a directory
if [ -d "$HOME/.dotfiles" ]; then
    # Set DOTFILES to "~/.dotfiles"
    DOTFILES="$HOME/.dotfiles"
elif [ -f "$HOME/.dotfiles" ]; then
    # Read the first line of ~/.dotfiles and save it to DOTFILES
    read -r DOTFILES < "$HOME/.dotfiles"
fi
# Make DOTFILES available to everything in the current session
export DOTFILES

# Add the dotfiles bin to the PATH
## The path is where the shell searches for executables
## You can do `echo $path` to see a list of the folders the shell currently
## searches for executables
PATH="$DOTFILES/bin:$PATH"

# Check if ~/bin exists
if [ -d "$HOME/bin" ]; then
    # if so add it to the PATH
    PATH="$HOME/bin:$PATH"
fi
## Extend the path more here.
## For example if you are on a Mac using homebrew you could do something like:
## [ "$(which brew)" ] && PATH="$(brew --prefix)/bin:$PATH"
## Eventually it might make sense to move all path configuration to a separate
## file.

# Make path available in the shell
export PATH

# Settings
## A small collection of settings that I think are almost essential to shell
## usage.

# Don't overwrite the history every session
shopt -s histappend
# Save 10,000 lines of history in the history file.
## This number could also be much larger if you prefer. I use 100,000 and I
## wouldn't recommmend using a number larger than 1,000,000.
HISTFILE=10000
# Save 5000 lines of history in memory.
## This number is pretty conservative you could easily make it much larger
## though I would never recommend going higher than 100,000.
HISTSIZE=5000
## You could add more settings here. Try doing "bman shopt" to see a list of
## all of the options you can set.
## One that I really like is `setopt -s extglob`. This increases the number of
## ways you can glob for files. For example with extglob set you can do
## `ls !(*.txt)` to show all the files in your current directory that don't end
## in '.txt'
##
## Many people would include their bash keybindings here. I recommend putting
## them in your inputrc for reasons detailed in inputrc.symdot.

# Aliases

# Test what kind of coreutils are present on the system
if [ "$(ls --color=auto)" ]; then
    # for gnu-coreutils make ls colorful
    alias ls='ls --color=auto'
else
    # for bsd-coreutils make ls colorful
    alias ls='ls -G'
fi
## I would put any additional aliases here

# Functions

# View specific information about stuff for bash
# Sets the pager environment variable to a string that searches for the
# first instance of the argument. If you don't find what you are looking for
# immediately try pressing n a few times until you see wuat you are trying to
# find.
function bman {
    PAGER="less -g -s +'/^       $1'" man 1 bash
}
## I think this is a really important command to have because it helps you find
## help for yourself more easily. It is often confusing to do something like
## `man if` and then just get the man page for bash builtins and not know where
## to proceed from there except to look on the internet. With this function it
## is easy to try bman bash and then find a section of the help that you
## actually care about.
##
## I would put additional functions here.

# define a simple prompt to appear at the command line:
# it consists of the current working directory (e.g. ~/src) then '> '
export PS1="\w> "
## The kind of prompt you use is really up to you there are really fancy ones
## for example 'agnoster' and really simple ones like this one
